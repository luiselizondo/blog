---
layout: post
title: How to run functional tests with PHPUnit on a database using Laravel and Docker?
---

<p>Call me a freak, but testing should be done in an environment that is as similar as possible to the real thing, right? If that's the case, then to me it doesn't make much sense to Mock objects or to use a different database software than the one you're going to use on the production environment.&nbsp;</p><p>If tests are supposed to make you sleep better at night, let me tell you that mocking and using sqlite are not working. In fact, I had multiple errors while&nbsp;running migrations on sqlite but not while using MySQL which is the DB I use on production.&nbsp;</p><p>You might know that I've been using Docker for the last months and that I think is awesome, if you don't know what Docker is, you should, but this is not the post to learn about it. Drupal is another&nbsp;project that I've been using for more than 7 years, and Drupal actually does a great thing when it comes to testing, it creates a whole new installation of Drupal in the same database you’re using in production, but with a special prefix on each table, so when it finishes, it just removes all the tables with the special prefix.</p><p>So, what if I can create a process that is as automated as possible (I’m not using Jenkins here) to run my tests on a real MySQL database and at the same time make it as easy as possible.</p><p>I’m using Laravel because I’m developing a small project with it and I want to learn it, so that’s the one project I’ll use but the same process can be applied to other languages. I’m already using Docker to run my Laravel application so I’m going to skip that part.</p><p><strong>The process</strong></p><p><span style="line-height: 1.6em;">The process is rather simple:</span></p><ol><li>Setup MySQL with a username, a password and a database. Use docker so we can remove the container when the tests finish.</li><li>Run all migrations on the new database.</li><li>Run tests.</li><li>Clean up.</li></ol><p><span style="line-height: 1.6em;">This is almost transparent to the tests, since I just have to update the testing/database.php file with the new settings and then I just have to truncate a table before each test.</span></p><p><strong>Enough words, show me some code!</strong></p><p><span style="line-height: 1.6em;">All right, the script to run everything is the following:</span></p><p>&nbsp;</p><p>&nbsp;</p><p>I just saved it on the root of my project directory and to run it I just do ./test. Please remember to do chmod +x test before.</p><p>My config file looks like this:</p><p>&nbsp;</p><p>On my tests, I have a TestCase.php class that Laravel uses, so in that class I just created a public method to help me truncate a table:</p><p><code>public function truncateTable($table) {DB::table($table)-&gt;truncate();}</code></p><p>And on my test, I just do:</p><p><span style="font-size: 13px; line-height: 21.503999710083008px;"><code>/** @before **/public function truncateTable() { parent::truncateTable(“mytable”);}</code></span></p><p>And that’s it. The rest of the tests are normal PHP unit tests.</p>