---
layout: post
title: Creating a LEMP with Docker and the Data-Only Container Pattern
date: '2014-05-15 19:43:41'
tags:
- docker
- lemp
- mariadb
- mysql
- ngnix
---

<p>&nbsp;</p><p><strong>Create a data container</strong></p><p>[code]$ docker run -v /var/data --name APPDATA busybox true[/code]</p><p>This is tricky but here's what's happening:</p><ol><li>We're using the Data-Only Container Pattern to create a "hidden" directory where to save the data</li><li>We create a new volume "/var/data" inside the container with name "APPDATA" which is using&nbsp; the "busybox" image and we run the "true" command so it finishes automatically.</li><li>The name busybox IS actually an docker image which exists in the docker.io repository, it contains utilities.</li><li>We run the true command becuase it's not needed that this image is running. It just needs to exists, so running true will create it but it will not be running.</li><li>It's not neccesary to run the image with -d unless you want to prevent this container from being removed (it will be removed anyway if you do docker rm -f"</li><li>The name APPDATA allows us to identify it easily as a data container.</li><li>The /var/www directory will be created INSIDE the container and it WILL NOT be linked to the /var/www on your host, they are different directories, period, do not confuse them.</li><li>The /var/data will be available</li><li>If you do docker inspect APPDATA you'll get something like:<br><br>[code]..."Volumes": {"/var/www": "/var/lib/docker/vfs/dir/ed5ec43a7237f2ff51159e900a336f61470b261f38b83d5f04def259f492a231"}[/code]<br><br>You can see that /var/www inside the container is actually mapped to "/var/lib/docker/vfs/dir/ed5ec43a7237f2ff51159e900a336f61470b261f38b83d5f04def259f492a231" in your host machine, if you go to that directory (as root) you're accessing the same folder that your container is accessing, but it's not recommended to do it.</li><li>We only created one volume with the path /var/www but we can create as many as we want, BUT since creating volumes is inexpensive, you probably want to create one volume for each container to keep things organized.</li></ol><p>&nbsp;</p><p>If you want to know more about this, read: http://docs.docker.io/use/working_with_volumes/</p><p><strong>Create the MariaDB container</strong></p><p>Before we do this, we need to create another data volume container to save the MariaDB data.</p><p>[code]$ docker run -v /var/lib/mysql --name DBDATA busybox true[/code]</p><p>I'm using the dockerfile/mariadb and if you inspect the Dockerfile of that image, you'll see that it will save the data in /data so it needs a volume in /data.</p><p>Now we can run the MariaDB container:</p><p>[code]$ docker run -it --rm -p 3306:3306 --volumes-from DBDATA dockerfile/mariadb[/code]</p><p>The --rm is something we haven't used before, it just means that the container will be removed if it exists, which is something we want, if MariaDB fails, we need to kill it and start another one, Docker will take care of the removal of this container. Launching a new container is something will do in another tutorial.</p><p>Database</p><p>[code]docker pull orchardup/mysql[/code]</p><p>[code]docker run -d -e "MYSQL_ROOT_PASSWORD=123" -e "MYSQL_DATABASE=drupal" --volumes-from DBDATA --name mysql orchardup/mysql[/code]</p><p><br><strong>Create the php5-nginx container</strong></p><p>[code]$ docker run -it --volumes-from APPDATA -v /var/www/siaeducacion:/var/www -p 8000:80 --name lemp luis/php5-nginx[/code]</p><p>Here we use whatever volume we created in the APPDATA container and also map /var/www/siaeducacion in the host to /var/www inside the container.</p><p>[code]HOME=/<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>HOSTNAME=0035b1fb8e54<br>TERM=xterm<br>MYSQL_PORT=tcp://172.17.0.4:3306<br>MYSQL_PORT_3306_TCP=tcp://172.17.0.4:3306<br>MYSQL_PORT_3306_TCP_ADDR=172.17.0.4<br>MYSQL_PORT_3306_TCP_PORT=3306<br>MYSQL_PORT_3306_TCP_PROTO=tcp<br>MYSQL_NAME=/loving_fermi/mysql<br>MYSQL_ENV_MYSQL_ROOT_PASSWORD=123<br>MYSQL_ENV_MYSQL_DATABASE=drupal<br>DEBIAN_FRONTEND=noninteractive[code]</p><p>&nbsp;</p>